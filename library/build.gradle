apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.dokka'

group = 'at.allaboutapps.gdpr'
version = '1.0.0-alpha2'

android {
    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.5.0'
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    def lifecycle_version = "2.5.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    implementation "com.github.allaboutapps:A3WebView:V0.1.2"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

task javadoc(type: Javadoc) {
    excludes = ['**/*.kt'] // Exclude all kotlin files from javadoc file.
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir

    configuration {
        includeNonPublic = false
        skipDeprecated = false

        reportUndocumented = true
        skipEmptyPackages = true
        targets = ["JVM"]
        platform = "JVM"
    }
}

task generateJavadocsJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from dokka.outputDirectory
}

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

task generateJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath()
            .join(File.pathSeparator))
}

artifacts {
    archives generateSourcesJar, generateJavadocsJar
}

android {
    lintOptions {
        abortOnError false
    }
}

task updateStrings(type: Exec, group: "localization") {
    def executableName
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        executableName = ["cmd", '/c', "google-docs-i18n-strings"]
    } else {
        executableName = ["google-docs-i18n-strings"]
    }

    commandLine = (executableName + [
            "-a", "src/main/res",
            "-p", "android",
            "-s", "1s_VGO47jYc7kH2RQ5M475G5Eazwt-OPhyghmckEh3mI"
    ])
}
